{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS_ARRAY","App","useState","quote","setQuote","index","setIndex","quotesArray","setQuotesArray","author","setAuthor","bColor","setbColor","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","useEffect","className","style","backgroundColor","color","id","onClick","number","Math","floor","random","length","indexOfColor","getRandomQuote","href","encodeURI","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAWgBA,G,MAXM,CAAC,UAAW,UAAW,UAAW,UAAW,UAClE,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,OCsD9BC,MAxDf,WACE,MAA0BC,mBAAS,+EAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4BN,mBAAS,eAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAA2BR,mBAAS,WAApC,mBAAOS,EAAP,KAAcC,EAAd,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBX,EAAeW,EAAWC,QAHR,2CAAH,sDAyBjB,OAnBAC,qBAAU,WACRR,EAjBc,4IAkBb,IAkBD,qBAAKS,UAAU,MAAf,SACE,qBAAKA,UAAU,WAAWC,MAAS,CAACC,gBAAiBb,EAAQc,MAAOd,GAApE,SAEE,sBAAKe,GAAG,YAAR,UACI,oBAAGA,GAAG,OAAQH,MAAQ,CAACE,MAAOd,GAA9B,cACIR,EADJ,OAGA,oBAAGuB,GAAG,SAASH,MAAQ,CAACE,MAAOd,GAA/B,eACGF,KAEH,wBAAQc,MAAQ,CAACC,gBAAiBb,GAASe,GAAG,YAAYC,QAAS,kBAtBtD,WACrB,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAWxB,EAAYyB,QAChDC,EAAeJ,KAAKC,MAAMD,KAAKE,SAAW/B,EAAagC,QAC3D1B,EAASsB,GACTxB,EAASG,EAAYF,GAAOF,OAC5BO,EAAUH,EAAYF,GAAOI,QAC7BG,EAAUZ,EAAaiC,IAgB0DC,IAAzE,0BAGA,mBAAGX,MAAQ,CAACC,gBAAiBb,GAASwB,KAAMC,UAAU,4CAAD,OAA6CjC,EAA7C,cAAwDM,IAAWiB,GAAG,cAA3H,2BCzCGW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe06b442.chunk.js","sourcesContent":[" const COLORS_ARRAY = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\n export default COLORS_ARRAY","import React, {useState, useEffect } from 'react';\nimport './App.scss';\nimport COLORS_ARRAY from \"./colorsArray.js\";\n\nlet quotesDbUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n\nfunction App() {\n  const [quote, setQuote] = useState(\"Life isn’t about getting and having, it’s about giving and being.\");\n  const [index, setIndex] = useState(0);\n  const [quotesArray, setQuotesArray] = useState(null);\n  const [author, setAuthor] = useState(\"Kevin Kruse\");\n  const [bColor,setbColor] = useState('#FF1A66');\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArray(parsedJSON.quotes)\n  }\n\n  useEffect(() => {\n    fetchQuotes(quotesDbUrl)\n  }, [])\n\n\n\n\n\n  const getRandomQuote = () => {\n    let number = Math.floor(Math.random() * quotesArray.length);\n    let indexOfColor = Math.floor(Math.random() * COLORS_ARRAY.length);\n    setIndex(number);\n    setQuote(quotesArray[index].quote);\n    setAuthor(quotesArray[index].author);\n    setbColor(COLORS_ARRAY[indexOfColor])\n\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\" style = {{backgroundColor: bColor, color: bColor}}>\n\n        <div id=\"quote-box\">\n            <p id=\"text\"  style ={{color: bColor}}> \n              \"{quote}\"\n            </p>\n            <p id=\"author\" style ={{color: bColor}} >\n            - {author}\n            </p>\n            <button style ={{backgroundColor: bColor}} id=\"new-quote\" onClick={() => getRandomQuote()}>\n              Change Quote\n            </button>\n            <a style ={{backgroundColor: bColor}} href={encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} - ${author}`)} id=\"tweet-quote\">tweet</a> \n\n        </div>\n        \n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}